#include<iostream>  
#include <cmath>
#include <cstdbool> 
#include <fstream> 
using namespace std;

class Vector3D{ 
	double X;
	double Y;
	double Z;	
public:
	Vector3D() {
		this->X = 0;
		this->Y = 0;
		this->Z = 0;
	}
	Vector3D(double X,double Y,double Z) {
		this->X = X;
		this->Y = Y;
		this->Z = Z;
	}
	Vector3D& operator=(Vector3D tmp) {
		this->X = tmp.X;
		this->Y = tmp.Y;
		this->Z = tmp.Z;
		return *this;
	}

	double get_X() {
		return this->X;
	}
	double get_Y() {
		return this->Y;
	}
	double get_Z() {
		return this->Z;
	}
	void set_X(double X) {
		this->X=X;
	}
	void set_Y(double Y) {
		this->Y = Y;
	}
	void set_Z(double Z) {
		this->Z = Z;
	}

	bool collinearity_of_vectors(Vector3D vector) {

		if (this->X*vector.Y == this->Y *vector.X && this->Z*vector.X == this->X *vector.Z)
			return true;
		else
			return false;
	}

	double distance(Vector3D vector) {
		double result;
		result = sqrt(pow(this->X-vector.X,2)+ pow(this->Y-vector.Y, 2)+ pow(this->Z-vector.Z, 2));
		return result;
	}

};



class Segment3D:public Vector3D {
	Vector3D start;
	Vector3D end;
public:

	Segment3D() {
		Vector3D start;
		Vector3D end;
		this->start = start;
		this->end =end ;
	}
	Segment3D(Vector3D start,Vector3D end) {
		this->start = start;
		this->end = end;
	}

	Vector3D get_start(){
		return this->start;
	}
	Vector3D get_end(){
		return this->end;
	}

	Vector3D Guiding_vector(){
		Vector3D tmp;
		tmp.set_X(this->end.get_X() -this->start.get_X());
		tmp.set_Y (this->end.get_Y() - this->start.get_Y());
		tmp.set_Z (this->end.get_Z() - this->start.get_Z());
		return tmp;
	}
	
	bool the_segments_belong_to_one_straight_line(Segment3D second) {
		Vector3D tmp=Guiding_vector();
		double help1, help2,help3,help4;
		help1 = (second.get_start().get_X() - this->start.get_X())*tmp.get_Y();
		help2= (second.get_start().get_Y() - this->start.get_Y())*tmp.get_X();
		help3 = (second.get_start().get_X() - this->start.get_X())*tmp.get_Z();
		help4 = (second.get_start().get_Z() - this->start.get_Z())*tmp.get_X();
		if (help1==help2&&help3==help4)
			return true;
		else
			return false;

	}
	bool contain_a_point(Vector3D point){
		if (point.distance(this->start) + point.distance(this->end) == this->start.distance(this->end))
			return true;
		else return false;

	}
};

double det3D(Vector3D first, Vector3D second, Vector3D third) {
	double result;

	double tmp1 = first.get_X()*second.get_Y()*third.get_Z() + first.get_Y()*second.get_Z()*third.get_X() + first.get_Z()*second.get_X()*third.get_Y();
	double tmp2= first.get_Z()*second.get_Y()*third.get_X() + first.get_X()*second.get_Z()*third.get_Y() + first.get_Y()*second.get_X()*third.get_Z();
	return result=tmp1-tmp2;
}

Vector3D intersection_of_straight_lines(Vector3D point1, Vector3D guiding_vector1,Vector3D point2, Vector3D guiding_vector2) {
	Vector3D result;
	double det2D = (guiding_vector2.get_X()*guiding_vector1.get_Y() - guiding_vector1.get_X()*guiding_vector2.get_Y());
	double C1, C2;
	double t, s;
	C1 = point2.get_X() - point1.get_X();
	C2 = point2.get_Y() - point1.get_Y();


	t=(-C1 * guiding_vector2.get_Y() + C2 * guiding_vector2.get_X())/det2D;
	s=(-C1 * guiding_vector1.get_Y() + C2 * guiding_vector1.get_X())/det2D;

		result.set_X(point1.get_X() + guiding_vector1.get_X()*t);
		result.set_Y(point1.get_Y() + guiding_vector1.get_Y()*t);
		result.set_Z(point1.get_Z() + guiding_vector1.get_Z()*t);
	
	return result;
}
void Intersect(Segment3D first, Segment3D second,ofstream &file) {
	Vector3D result;
	Vector3D tmp1 =first.Guiding_vector();
	Vector3D tmp2 = second.Guiding_vector();
	Segment3D help(first.get_start(),second.get_start());
	Vector3D tmp3=help.Guiding_vector();
	//отрезки принадлежат скрещивающимся прямым
	if (det3D(tmp1, tmp2, tmp3) != 0) {
		file << "Отрезки не пересекаются";
		return;
	}
	//Отрезки принадлежат параллельным прямым
	if (tmp1.collinearity_of_vectors(tmp2)&&!first.the_segments_belong_to_one_straight_line(second)) {
		file << "Отрезки не пересекаются";
		return;
	}
	//Отрезки принадлежат одной прямой
	if (tmp1.collinearity_of_vectors(tmp2) && first.the_segments_belong_to_one_straight_line(second)) {
		if (!first.contain_a_point(second.get_start()) && !first.contain_a_point(second.get_end())) {
			file << "Отрезки не пересекаются";
			return;
		}
		//Один отрезок содержится в другом
		if (first.contain_a_point(second.get_start()) && first.contain_a_point(second.get_end())) {
			file << "Отрезки накладываются по отрезку:"<<endl;
			file << second.get_start().get_X() << " " << second.get_start().get_Y() << " " << second.get_start().get_Z() << endl;
			file << second.get_end().get_X() << " " << second.get_end().get_Y() << " " << second.get_end().get_Z();
			return;
		}

		if (second.contain_a_point(first.get_start()) && second.contain_a_point(first.get_end())) {
			file << "Отрезки накладываются по отрезку:" << endl;
			file << first.get_start().get_X() << " " << first.get_start().get_Y() << " " << first.get_start().get_Z() << endl;
			file << first.get_end().get_X() << " " << first.get_end().get_Y() << " " << first.get_end().get_Z();
			return;
		}
		//Наложение отрезков
		if (first.contain_a_point(second.get_start())&& second.contain_a_point(first.get_end())) {
			file << "Отрезки накладываются по отрезку:" << endl;
			file << second.get_start().get_X() << " " << second.get_start().get_Y() << " " << second.get_start().get_Z() << endl;
			file << first.get_end().get_X() << " " << first.get_end().get_Y() << " " << first.get_end().get_Z();
			return;
		}
		else
		{
			file << "Отрезки накладываются по отрезку:" << endl;
			file << first.get_start().get_X() << " " << first.get_start().get_Y() << " " << first.get_start().get_Z() << endl;
			file << second.get_start().get_X() << " " << second.get_start().get_Y() << " " << second.get_start().get_Z();
			return;

		}


	}

	result = intersection_of_straight_lines(first.get_start(), tmp1, second.get_start(), tmp2) ;
	if (first.contain_a_point(result)&& second.contain_a_point(result)) {
		file << result.get_X()<<" "<< result.get_Y() <<" "<<result.get_Z();
		return;
	}
	else file << "Отрезки не пересекаются";

}
int main() {
	setlocale(LC_ALL, "Russian");
	ifstream file;
	ofstream file2;
	file.open("input.txt");
	file2.open("output.txt");

	
	if (file.is_open()) {
		Segment3D first;
		Segment3D second;
		double x, y, z;
		for (int i = 0; i <= 1; i++) {
			file >> x;
			file >> y;
			file >> z;
			Vector3D start(x,y,z);
			file >> x;
			file >> y;
			file >> z;
			Vector3D end(x,y,z);
			if(i==0) 
				first = { start,end };
			else 
				second = { start, end };
		}

		Intersect(first, second,file2);
	}
	file.close();
	file2.close();
	return 0;
}
